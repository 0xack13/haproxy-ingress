{{ $ing := . }}
{{ $cfg := .Cfg }}
global
    daemon
    stats socket /tmp/haproxy
    #server-state-file global
    #server-state-base /var/state/haproxy/
{{ if ne $cfg.Syslog "" }}
    log {{ $cfg.Syslog }} format rfc5424 local0
    log-tag ingress
{{ end }}
{{ if ne $cfg.SSLDHParam.Filename "" }}
    # DH PEM checksum: {{ $cfg.SSLDHParam.PemSHA }}
    ssl-dh-param-file {{ $cfg.SSLDHParam.Filename }}
{{ else }}
    tune.ssl.default-dh-param {{ $cfg.SSLDHParam.DefaultMaxSize }}
{{ end }}
    ssl-default-bind-ciphers {{ $cfg.SSLCiphers }}
    ssl-default-bind-options {{ $cfg.SSLOptions }}

defaults
    log global
    #load-server-state-from-file global
    option redispatch
    option dontlognull
    option http-server-close
    option http-keep-alive
    maxconn {{ $cfg.MaxConn }}
    timeout http-request    {{ $cfg.TimeoutHTTPRequest }}
    timeout connect         {{ $cfg.TimeoutConnect }}
    timeout client          {{ $cfg.TimeoutClient }}
    timeout client-fin      {{ $cfg.TimeoutClientFin }}
    timeout server          {{ $cfg.TimeoutServer }}
    timeout server-fin      {{ $cfg.TimeoutServerFin }}
    timeout tunnel          {{ $cfg.TimeoutTunnel }}
    timeout http-keep-alive {{ $cfg.TimeoutKeepAlive }}

{{ if ne (len $ing.Userlists) 0 }}
######
###### Userlists
######
{{ range $userlist := $ing.Userlists }}
userlist {{ $userlist.ListName }}
{{ range $user := $userlist.Users }}
    user {{ $user.Username }} {{ if not $user.Encrypted }}insecure-{{ end }}password {{ $user.Password }}
{{ end }}
{{ end }}
{{ end }}

######
###### Backends
######
{{ range $backend := $ing.Backends }}
backend {{ $backend.Name }}
    mode http
    balance {{ $cfg.BalanceAlgorithm }}
{{ range $endpoint := $backend.Endpoints }}
{{ $target := (print $endpoint.Address ":" $endpoint.Port) }}
    server {{ $target }} {{ $target }} check port {{ $endpoint.Port }} inter {{ $cfg.BackendCheckInterval }}
{{ end }}
{{ end }}

######
###### HTTP frontend
######
frontend httpfront
    bind *:80
    mode http
{{ if ne $cfg.Syslog "" }}
    option httplog
{{ end }}
{{ if eq $cfg.Forwardfor "add" }}
    reqidel ^X-Forwarded-For:.*
    option forwardfor
{{ else if eq $cfg.Forwardfor "ifmissing" }}
    option forwardfor if-none
{{ end }}
{{ range $server := $ing.HTTPServers }}
{{ range $location := $server.Locations }}
{{ if ne $location.HAWhitelist "" }}
    http-request deny if { hdr(host) {{ $server.Hostname }} }{{ $location.HAMatchPath }} !{ src{{ $location.HAWhitelist }} }
{{ end }}
{{ $listName := $location.Userlist.ListName }}
{{ if ne $listName "" }}
    {{ $realm := $location.Userlist.Realm }}
    http-request auth {{ if ne $realm "" }}realm "{{ $realm }}" {{ end }}if { hdr(host) {{ $server.Hostname }} }{{ $location.HAMatchPath }} !{ http_auth({{ $listName }}) }
{{ end }}
{{ end }}
{{ end }}
{{ range $server := $ing.HTTPServers }}
{{ $appRoot := $server.RootLocation.Redirect.AppRoot }}
{{ if ne $appRoot "" }}
    redirect location {{ $appRoot }} if { hdr(host) {{ $server.Hostname }} } { path / }
{{ end }}
{{ end }}
{{ range $server := $ing.HTTPSServers }}
{{ if $server.SSLRedirect }}
    redirect scheme https if { hdr(host) {{ $server.Hostname }} }
{{ else }}
{{ range $location := $server.Locations }}
{{ if $location.Redirect.SSLRedirect }}
    redirect scheme https if { hdr(host) {{ $server.Hostname }} }{{ $location.HAMatchPath }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}
{{ range $server := $ing.HTTPServers }}
{{ range $location := $server.Locations }}
{{ if or (eq $server.SSLCertificate "") (not $location.Redirect.SSLRedirect) }}
    use_backend {{ $location.Backend }} if { hdr(host) {{ $server.Hostname }} }{{ if not $location.IsRootLocation }} { path_beg {{ $location.Path }} }{{ end }}
{{ end }}
{{ end }}
{{ end }}
    default_backend {{ $ing.DefaultServer.RootLocation.Backend }}

######
###### HTTPS frontend (tcp mode)
######
frontend httpsfront
    bind *:443
    mode tcp
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
{{ range $server := $ing.HTTPSServers }}
    use_backend httpsback-{{ $server.Hostname }} if { req.ssl_sni -i {{ $server.Hostname }} }
{{ end }}
    default_backend httpsback-default-backend

{{ range $server := $ing.HTTPSServers }}
{{ $host := $server.Hostname }}
##
## {{ $host }}
backend httpsback-{{ $host }}
    mode tcp
    server {{ $host }} unix@/var/run/haproxy-host-{{ $host }}.sock send-proxy-v2

frontend httpsfront-{{ $host }}
    {{ $authSSLCert := $server.RootLocation.CertificateAuth.AuthSSLCert }}
    # CRT PEM checksum: {{ $server.SSLPemChecksum }}
{{ if ne $authSSLCert.PemSHA "" }}
    # CA PEM checksum: {{ $authSSLCert.PemSHA }}
{{ end }}
    bind unix@/var/run/haproxy-host-{{ $host }}.sock ssl crt {{ $server.SSLCertificate }}{{ if ne $authSSLCert.CAFileName "" }} ca-file {{ $authSSLCert.CAFileName }} verify required{{ end }} accept-proxy
    mode http
{{ if ne $cfg.Syslog "" }}
    option httplog
{{ end }}
{{ if eq $cfg.Forwardfor "add" }}
    reqidel ^X-Forwarded-For:.*
    option forwardfor
{{ else if eq $cfg.Forwardfor "ifmissing" }}
    option forwardfor if-none
{{ end }}
{{ if $cfg.HSTS }}
    rspadd "Strict-Transport-Security: max-age={{ $cfg.HSTSMaxAge }}{{ if $cfg.HSTSIncludeSubdomains }}; includeSubDomains{{ end }}{{ if $cfg.HSTSPreload }}; preload{{ end }}"
{{ end }}
{{ range $location := $server.Locations }}
{{ if ne $location.HAWhitelist "" }}
    http-request deny if{{ $location.HAMatchPath }} !{ src{{ $location.HAWhitelist }} }
{{ end }}
{{ $listName := $location.Userlist.ListName }}
{{ if ne $listName "" }}
    {{ $realm := $location.Userlist.Realm }}
    http-request auth {{ if ne $realm "" }}realm "{{ $realm }}" {{ end }}if{{ $location.HAMatchPath }} !{ http_auth({{ $listName }}) }
{{ end }}
{{ end }}
{{ $appRoot := $server.RootLocation.Redirect.AppRoot }}
{{ if ne $appRoot "" }}
    redirect location {{ $appRoot }} if { path / }
{{ end }}
{{ range $location := $server.Locations }}
{{ if not $location.IsRootLocation }}
    use_backend {{ $location.Backend }} if { path_beg {{ $location.Path }} }
{{ else }}
    default_backend {{ $location.Backend }}
{{ end }}
{{ end }}
{{ end }}

##
## Default backend (tcp mode)
{{ $server := $ing.DefaultServer }}
{{ $location := $server.RootLocation }}
{{ $host := "default_backend" }}
backend httpsback-default-backend
    mode tcp
    server {{ $host }} unix@/var/run/haproxy-{{ $host }}.sock send-proxy-v2

frontend httpsfront-default-backend
    # CRT PEM checksum: {{ $server.SSLPemChecksum }}
    bind unix@/var/run/haproxy-{{ $host }}.sock ssl crt {{ $server.SSLCertificate }} accept-proxy
    mode http
{{ if ne $cfg.Syslog "" }}
    option httplog
{{ end }}
{{ if eq $cfg.Forwardfor "add" }}
    reqidel ^X-Forwarded-For:.*
    option forwardfor
{{ else if eq $cfg.Forwardfor "ifmissing" }}
    option forwardfor if-none
{{ end }}
{{ if $cfg.HSTS }}
    rspadd "Strict-Transport-Security: max-age={{ $cfg.HSTSMaxAge }}{{ if $cfg.HSTSIncludeSubdomains }}; includeSubDomains{{ end }}{{ if $cfg.HSTSPreload }}; preload{{ end }}"
{{ end }}
    default_backend {{ $location.Backend }}

######
###### Stats page
######
listen stats
    bind *:{{ $cfg.StatsPort }}
    mode http
    stats enable
    stats realm HAProxy\ Statistics
{{ if ne $cfg.StatsAuth "" }}
    stats auth {{ $cfg.StatsAuth }}
{{ end }}
    stats uri /
    no log
